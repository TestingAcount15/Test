local replicatedStorage = game:GetService("ReplicatedStorage")
local commonModules = replicatedStorage:WaitForChild("CommonModules")
local blockDefinitionModules = commonModules:WaitForChild("DefinitionModules"):WaitForChild("Block"):WaitForChild("DefinitionModules"):WaitForChild("Blocks")

local sections = {
    Badge = "CommonModules.DefinitionModules.Task.DefinitionModules.Badges",
 }

local knownBadges = {
    Badge = {
		"Play The Game",
"Reached Citadel",
"Reached Forest",
"Reached Mines",
"Reach 1M Coin Balance",
"Reach Player Level",
"Sit on the throne",
"Craft Recycled Blade",
"Collect 100 Flowers",
"Purchase Item",
"Defeat a Grimthorn",
"Cosmetics Change",
"Green Thumb",
"Slime Killer",
"Leap of Faith",
"The Wheel Turns",
"Farlight Crystals",
"Collect Trick or Treat Bag",
"Pumpkin Snatcher",
"Reached Darkfang Mire",
"Arachnella",
"Farlight Crystals Mire",
"I like Potatoes"
    }
}

local function getObjectByPath(root, path)
    local current = root
    for segment in string.gmatch(path, "[^.]+") do
        current = current:FindFirstChild(segment)
        if not current then
            warn("Could not find: " .. segment .. " in path: " .. path)
            return nil
        end
    end
    return current
end

local clipboardOutput = ""
local newBadgesOutput = ""
local newBadgesFound = false

for sectionName, path in pairs(sections) do
    local section = getObjectByPath(replicatedStorage, path)
    local knownBadgesSet = {}
    local newBadges = {}
    
    if knownBadges[sectionName] then
        for _, BadgeName in ipairs(knownBadges[sectionName]) do
            knownBadgesSet[BadgeName] = true
        end
    end
    
    if section then
        clipboardOutput = clipboardOutput .. "----- " .. sectionName .. " -----\n"
        local hasModules = false
        
        for _, moduleScript in pairs(section:GetChildren()) do
            if moduleScript:IsA("ModuleScript") then
                local moduleName = moduleScript.Name
                clipboardOutput = clipboardOutput .. moduleName .. "\n"
                hasModules = true
                
                if not knownBadgesSet[moduleName] then
                    newBadges[moduleName] = true
                    newBadgesFound = true
                end
            end
        end
        
        if not hasModules then
            clipboardOutput = clipboardOutput .. "No ModuleScripts found in " .. sectionName .. "\n"
        end
    end
    
    if next(newBadges) then
        newBadgesOutput = newBadgesOutput .. "----- New Badges in " .. sectionName .. " -----\n"
        for BadgeName in pairs(newBadges) do
            newBadgesOutput = newBadgesOutput .. BadgeName .. "\n"
        end
    end
end

local url = "https://discord.com/api/webhooks/1286233546566139957/CZflWIVH62v3_wslhZt0of-zuEpNAO09E8bnkulmU3rrufpY3QSZ2l3qp98UOc5OBCGl"
local data = {
    ['embeds'] = {}
}

local output = clipboardOutput .. "\n" .. (newBadgesFound and newBadgesOutput or "No new Badges found.")
local messages = {}

local embedColor = 16744575 

while #output > 0 do
    local chunk = output:sub(1, 2000)
    table.insert(messages, chunk)
    output = output:sub(2001)
end


for i, message in ipairs(messages) do
    local embed = {
        ['title'] = "Badge List Chunck " .. tostring(i),
        ['description'] = message,
        ['color'] = embedColor, 
        ['footer'] = {
            ['text'] = "Generated by the very best High Realms Player!"  
        }
    }
    table.insert(data['embeds'], embed)

    if #data['embeds'] == 10 then
        local jsonData = game:GetService("HttpService"):JSONEncode(data)

        local response = request({
            Url = url,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })

        if response.Success then
            print("Message " .. tostring(i) .. " sent to Discord webhook!")
        else
            print("Error sending message " .. tostring(i) .. " to Discord webhook:")
            print(response.StatusCode)
            print(response.StatusMessage)
            print(response.Body)
        end

        data['embeds'] = {}
    end
end

if #data['embeds'] > 0 then
    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    local response = request({
        Url = url,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonData
    })

    if response.Success then
        print("Final message sent to Discord webhook!")
    else
        print("Error sending final message to Discord webhook:")
        print(response.StatusCode)
        print(response.StatusMessage)
        print(response.Body)
    end
end
