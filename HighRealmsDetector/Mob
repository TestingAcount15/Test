local replicatedStorage = game:GetService("ReplicatedStorage")
local commonModules = replicatedStorage:WaitForChild("CommonModules")
local blockDefinitionModules = commonModules:WaitForChild("DefinitionModules"):WaitForChild("Block"):WaitForChild("DefinitionModules"):WaitForChild("Blocks")

local sections = {
    Mobs = "CommonModules.DefinitionModules.Mob.DefinitionModules",
}

local knownMobs = {
    Mobs = {
        "Flamelet", "Gizmo", "Green Slime", "GrimThorn", "Muncher", "Rattles","Darkfang Spider", "Arachnella", "Blue Flamelet", "Slimegore"
    }
}


local function getObjectByPath(root, path)
    local current = root
    for segment in string.gmatch(path, "[^.]+") do
        current = current:FindFirstChild(segment)
        if not current then
            warn("Could not find: " .. segment .. " in path: " .. path)
            return nil
        end
    end
    return current
end

local function detectNewFolders(root, knownFolders)
    local newFolders = {}
    for _, folder in ipairs(root:GetChildren()) do
        if folder:IsA("Folder") and not knownFolders[folder.Name] then
            newFolders[folder.Name] = true
        end
    end
    return newFolders
end

local clipboardOutput = ""
local newMobsOutput = ""
local newMobsFound = false
local newFoldersOutput = ""
local knownFolders = {}

for sectionName, path in pairs(sections) do
    local section = getObjectByPath(replicatedStorage, path)
    local knownMobsSet = {}
    local newMobs = {}
    local newFolders = {}

    if knownMobs[sectionName] then
        for _, MobName in ipairs(knownMobs[sectionName]) do
            knownMobsSet[MobName] = true
        end
    end
    
    if section then
        clipboardOutput = clipboardOutput .. "----- " .. sectionName .. " -----\n"
        local hasModules = false
        
        for _, moduleScript in pairs(section:GetChildren()) do
            if moduleScript:IsA("ModuleScript") then
                local moduleName = moduleScript.Name
                clipboardOutput = clipboardOutput .. moduleName .. "\n"
                hasModules = true
                
                if not knownMobsSet[moduleName] then
                    newMobs[moduleName] = true
                    newMobsFound = true
                end
            end
        end
        
        if not hasModules then
            clipboardOutput = clipboardOutput .. "No ModuleScripts found in " .. sectionName .. "\n"
        end

        newFolders = detectNewFolders(section, knownFolders)
        if next(newFolders) then
            newFoldersOutput = newFoldersOutput .. "----- New Folders in " .. sectionName .. " -----\n"
            for folderName in pairs(newFolders) do
                newFoldersOutput = newFoldersOutput .. folderName .. "\n"
            end
        end
    end
    
    if next(newMobs) then
        newMobsOutput = newMobsOutput .. "----- New Mobs in " .. sectionName .. " -----\n"
        for MobName in pairs(newMobs) do
            newMobsOutput = newMobsOutput .. MobName .. "\n"
        end
    end
end

local url = "https://discord.com/api/webhooks/1286226884304044032/YcCgY_ZC_7lxwjRpxvtf-0zfHrtVoEPeE6oLcblCxyq7tfjZez8_37-SxNv7Z94deV4W"
local data = {
    ['embeds'] = {}
}

local output = clipboardOutput .. "\n" .. (newMobsFound and newMobsOutput or "No new Mobs found.") .. "\n" .. newFoldersOutput
local messages = {}

local embedColor = 16744575 
local maxDescriptionLength = 4000

while #output > 0 do
    local chunk = output:sub(1, maxDescriptionLength)
    table.insert(messages, chunk)
    output = output:sub(maxDescriptionLength + 1)
end

local embed = {
    ['title'] = "Mob List",
    ['color'] = embedColor,
    ['footer'] = {
        ['text'] = "Generated by the very best High Realms Player!"  
    }
}

for i, message in ipairs(messages) do
    if i > 1 then
        local newEmbed = table.clone(embed)
        newEmbed['description'] = message
        table.insert(data['embeds'], newEmbed)

        if #data['embeds'] == 10 then
            local jsonData = game:GetService("HttpService"):JSONEncode(data)

            local response = request({
                Url = url,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })

            if response.Success then
                print("Message " .. tostring(i) .. " sent to Discord webhook!")
            else
                print("Error sending message " .. tostring(i) .. " to Discord webhook:")
                print(response.StatusCode)
                print(response.StatusMessage)
                print(response.Body)
            end

            data['embeds'] = {}
        end
    else
        embed['description'] = message
        table.insert(data['embeds'], embed)
    end
end

if #data['embeds'] > 0 then
    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    local response = request({
        Url = url,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonData
    })

    if response.Success then
        print("Final message sent to Discord webhook!")
    else
        print("Error sending final message to Discord webhook:")
        print(response.StatusCode)
        print(response.StatusMessage)
        print(response.Body)
    end
end
